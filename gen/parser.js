// Generated by PEG.js v0.11.0-dev, https://pegjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  // istanbul ignore next
  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    },

    not: function(expectation) {
      return "not " + describeExpectation(expectation.expected);
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleIndices = { Root: 0, Inlines: 62 };
  var peg$startRuleIndex = 0;

  var peg$literals = [
    "-",
    "_",
    "*",
    "#",
    "``",
  "`",
  "~~",
  "~",
  "<",
  "script",
  "pre",
  "style",
  ">",
  "</",
  "<!--",
  "-->",
  "<?",
  "?>",
  "<!",
  "<![CDATA[",
  "]]>",
  "/",
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "meta",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "section",
  "source",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul",
  ":",
  "=",
  "\\",
  "&",
  ";",
  "&#",
  "]",
  "[",
  "(",
  ")",
  "[]",
  "\"",
  "'",
  "![",
  "!",
  "->",
  "--",
  "---",
  "\n",
  "\r",
  " ",
  "\t",
  "\v",
  "\f",
  "www",
  "http",
  "https",
  "ftp",
  "://",
  "."
];
var peg$regexps = [
  /^[A-Z]/,
  /^[\-+*]/,
  /^[0-9]/,
  /^[.)]/,
  /^[xX]/,
  /^[0-9a-f]/i,
  /^[[\]]/,
  /^[^<>]/,
  /^[()]/,
  /^[<>]/,
  /^[a-zA-Z]/,
  /^[a-zA-Z0-9+.\-]/,
  /^[a-zA-Z0-9\-]/,
  /^[a-zA-Z_:]/,
  /^[a-zA-Z0-9_.:\-]/,
  /^[^ "'=<>`]/,
  /^[^']/,
  /^[^"]/,
  /^[ \t]/,
  /^[!"#$%&'()*+,-.\/:;<=>?@\^_`{|}\\~[\]]/,
  /^[\0-\x1F\x7F]/,
  /^[?!.,:*_~]/,
  /^[^<]/,
  /^[a-z]/i
];
var peg$expectations = [
  peg$literalExpectation("-", false),
  peg$literalExpectation("_", false),
  peg$literalExpectation("*", false),
  peg$anyExpectation(),
  peg$literalExpectation("#", false),
  peg$literalExpectation("``", false),
    peg$literalExpectation("`", false),
peg$literalExpectation("~~", false),
peg$literalExpectation("~", false),
peg$literalExpectation("<", false),
peg$literalExpectation("script", true),
peg$literalExpectation("pre", true),
peg$literalExpectation("style", true),
peg$literalExpectation(">", false),
peg$literalExpectation("</", false),
peg$literalExpectation("<!--", false),
peg$literalExpectation("-->", false),
peg$literalExpectation("<?", false),
peg$literalExpectation("?>", false),
peg$literalExpectation("<!", false),
peg$classExpectation([["A", "Z"]], false, false),
peg$literalExpectation("<![CDATA[", false),
peg$literalExpectation("]]>", false),
peg$literalExpectation("/", false),
peg$literalExpectation("address", true),
peg$literalExpectation("article", true),
peg$literalExpectation("aside", true),
peg$literalExpectation("base", true),
peg$literalExpectation("basefont", true),
peg$literalExpectation("blockquote", true),
peg$literalExpectation("body", true),
peg$literalExpectation("caption", true),
peg$literalExpectation("center", true),
peg$literalExpectation("col", true),
peg$literalExpectation("colgroup", true),
peg$literalExpectation("dd", true),
peg$literalExpectation("details", true),
peg$literalExpectation("dialog", true),
peg$literalExpectation("dir", true),
peg$literalExpectation("div", true),
peg$literalExpectation("dl", true),
peg$literalExpectation("dt", true),
peg$literalExpectation("fieldset", true),
peg$literalExpectation("figcaption", true),
peg$literalExpectation("figure", true),
peg$literalExpectation("footer", true),
peg$literalExpectation("form", true),
peg$literalExpectation("frame", true),
peg$literalExpectation("frameset", true),
peg$literalExpectation("h1", true),
peg$literalExpectation("h2", true),
peg$literalExpectation("h3", true),
peg$literalExpectation("h4", true),
peg$literalExpectation("h5", true),
peg$literalExpectation("h6", true),
peg$literalExpectation("head", true),
peg$literalExpectation("header", true),
peg$literalExpectation("hr", true),
peg$literalExpectation("html", true),
peg$literalExpectation("iframe", true),
peg$literalExpectation("legend", true),
peg$literalExpectation("li", true),
peg$literalExpectation("link", true),
peg$literalExpectation("main", true),
peg$literalExpectation("menu", true),
peg$literalExpectation("menuitem", true),
peg$literalExpectation("meta", true),
peg$literalExpectation("nav", true),
peg$literalExpectation("noframes", true),
peg$literalExpectation("ol", true),
peg$literalExpectation("optgroup", true),
peg$literalExpectation("option", true),
peg$literalExpectation("p", true),
peg$literalExpectation("param", true),
peg$literalExpectation("section", true),
peg$literalExpectation("source", true),
peg$literalExpectation("summary", true),
peg$literalExpectation("table", true),
peg$literalExpectation("tbody", true),
peg$literalExpectation("td", true),
peg$literalExpectation("tfoot", true),
peg$literalExpectation("th", true),
peg$literalExpectation("thead", true),
peg$literalExpectation("title", true),
peg$literalExpectation("tr", true),
peg$literalExpectation("track", true),
peg$literalExpectation("ul", true),
peg$literalExpectation(":", false),
peg$literalExpectation("=", false),
peg$classExpectation(["-", "+", "*"], false, false),
peg$classExpectation([["0", "9"]], false, false),
peg$classExpectation([".", ")"], false, false),
peg$literalExpectation("\\", false),
peg$literalExpectation("&", false),
peg$literalExpectation(";", false),
peg$literalExpectation("&#", false),
peg$classExpectation(["x", "X"], false, false),
peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
peg$literalExpectation("]", false),
peg$literalExpectation("[", false),
peg$literalExpectation("(", false),
peg$literalExpectation(")", false),
peg$literalExpectation("[]", false),
peg$classExpectation(["[", "]"], false, false),
peg$classExpectation(["<", ">"], true, false),
peg$classExpectation(["(", ")"], false, false),
peg$literalExpectation("\"", false),
peg$literalExpectation("'", false),
peg$literalExpectation("![", false),
peg$literalExpectation("!", false),
peg$classExpectation(["<", ">"], false, false),
peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "+", ".", "-"], false, false),
peg$literalExpectation("->", false),
peg$literalExpectation("--", false),
peg$literalExpectation("---", false),
peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-"], false, false),
peg$classExpectation([["a", "z"], ["A", "Z"], "_", ":"], false, false),
peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", ".", ":", "-"], false, false),
peg$classExpectation([" ", "\"", "'", "=", "<", ">", "`"], true, false),
    peg$classExpectation(["'"], true, false),
    peg$classExpectation(["\""], true, false),
    peg$literalExpectation("\n", false),
    peg$literalExpectation("\r", false),
    peg$classExpectation([" ", "\t"], false, false),
    peg$literalExpectation(" ", false),
    peg$literalExpectation("\t", false),
    peg$literalExpectation("\v", false),
    peg$literalExpectation("\f", false),
  peg$classExpectation(["!", "\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", [",", "."], "/", ":", ";", "<", "=", ">", "?", "@", "^", "_", "`", "{", "|", "}", "\\", "~", "[", "]"], false, false),
  peg$classExpectation([["\0", "\x1F"], "\x7F"], false, false)
];
var peg$functions = [
  function(blocks) {
      return visitor.visitRoot({ node: { children: blocks, } });
    },
  function() { 
        return visitor.visitThematicBreak({
          node:{ type: NODE_TYPES.ThematicBreak, }
        });
      },
  function(sharps) { return sharps.length<7 },
  function(sharps) {return ''},
  function(sharps, any) {return any},
  function(sharps, text) {return text.join('');},
  function(sharps, str) {return str;},
  function(sharps, content) {
        return visitor.visitAtxHeading({
          node:{
            type: NODE_TYPES.ATXHeading,
            level: sharps.length,
            text: content ? content: '',
          }
        });
      },
  function(first, bl) {return bl},
  function(first, blank, line) {return line.join('')},
  function(first, blank, chank) {return blank.join('')+chank},
  function(first, follow) {
        return visitor.visitIndentedCodeBlock({
          node:{
            type: NODE_TYPES.IndentedCodeBlock,
            text: first.join('')+follow.join('') }
        });
      },
  function(head, line) {return line},
  function(head, follow) {return [head].concat(follow)},
  function(bl) { return (bl.length>5 ? ' '.repeat(bl.length-5) : '')+'\n' },
  function(sp) {return (sp.length>4 ? ' '.repeat(sp.length-4) : '');},
  function(ind, any) {return any},
  function(ind, content, le) {return (ind+content.join('')+le)},
  function(indents, start, infostr, flag) {return (start.length>flag.length)||(start[0]!==flag[0])},
  function(indents, start, infostr, s) {
          return ( indents.length>0 ?
          (s.length > indents.length ? ' '.repeat(s.length-indents.length) : '') :
          s.join('') )
        },
  function(indents, start, infostr, sp, line) {return sp+line;},
  function(indents, start, infostr, sp) {return sp+'\n';},
  function(indents, start, infostr, content, end) {return (start.length>end.length)||(start[0]!==end[0])},
  function(indents, start, infostr, content) {
        return visitor.visitFencedCodeBlock({
          node:{
            type: NODE_TYPES.FencedCodeBlock,
            infoString: infostr,
            text: content.join('') }
        });
      },
  function(fence) {return fence.join('');},
  function(any) {return any},
  function(str) {return str.join('');},
  function(line, le) {return line.join('')+le;},
  function(content) {
        return visitor.visitHTMLBlock({
          node:{
            type: NODE_TYPES.HTMLBlock,
            text: content.join('')
          }
        });
      },
  function(sps, start, le) {return le},
  function(sps, start, c) {return c},
  function(sps, start, lines, end, follow, le) {return [sps,start,lines.join(''),end,follow,le]},
  function(sps, start, lines, le) {return [sps,start,lines.join(''),le]},
  function(t) {return t.text},
  function(tag) { return /\n/.test(tag)},
  function(tag) { return tag.startsWith('script')||tag.startsWith('pre')||tag.startsWith('style')},
  function(tag) {return tag},
  function(label, dest, t) {return t},
  function(label, dest, title) {
        return visitor.visitLinkReferenceDefinition({
          node: {
            type: NODE_TYPES.LinkReferenceDefinition,
            label: label.text,
            dest,
            title,
          }
        });
      },
  function(first, follow) {return visitor.visitParagraph({
          node: {
            type: NODE_TYPES.Paragraph,
            text:(first+follow.join('')).trim()}})},
  function(first, follow, level) {return visitor.visitSetextHeading({
          node: {
            type: NODE_TYPES.SetextHeading,
            level: level,
            text:(first+follow.join('')).trim()}
        })},
  function(first, follow, result) {return result},
  function(line) {return line.join('')},
  function(line) {return '\n'+line},
  function(head) { return  head.marker.type == LIST_TYPES.Ordered && head.marker.num != 1 },
  function() {return 1},
  function() {return 2},
  function(level) {return level},
  function() {return visitor.visitBlankLine({node: {text:''}});},
  function() { Util.pushBlockStack(blockStack, {type:NODE_TYPES.BlockQuote}) },
  function(first, block) { return block },
  function(first, follow) { Util.popBlockStack(blockStack) },
  function(first, follow) {
        return visitor.visitBlockQuote({
          node:{
            type: NODE_TYPES.BlockQuote,
            children:[first].concat(follow),
          }
        })
      },
  function() { Util.pushListIndentStack(states.listIndentStack, 3) },
  function() { Util.popListIndentStack(states.listIndentStack) },
  function(first, bl, item) { return first.marker.delimiter == item.marker.delimiter},
  function(first, bl, item) {return {item, hasBlankline:bl.length!=0}},
  function(first, follow) { Util.popListIndentStack(states.listIndentStack) },
  function(first, follow) {
        const children = [first].concat(follow.map(x => x.item))
        return visitor.visitList({
          node: {
            type: NODE_TYPES.List,
            isLoose: !follow.every(x=>!x.hasBlankline) || !children.every(x=>!x.hasBlankline),
            markerType: first.marker.type,
            delimiter: first.marker.delimiter,
            startNum: first.marker.num,
            children: children,
          },
        })
      },
  function(pre, innerIndNum) {return {
        marker:pre.marker,
        length:pre.length+innerIndNum.length+1,
        pre
      }},
  function(head) { Util.pushBlockStack(blockStack, {
        type: NODE_TYPES.ListItem,
        size: head.length,
        delimiter: head.marker.delimiter})
      },
  function(head) { Util.changeListIndentStack(states.listIndentStack, head.length-1) },
  function(head, first, bl, block) {return {block,hasBlankline:bl.length!=0}},
  function(head, first, follow) { Util.popBlockStack(blockStack) },
  function(head, first, follow) {
        return visitor.visitListItem({
          node: {
            type: NODE_TYPES.ListItem,
            hasBlankline: !follow.every(x=>!x.hasBlankline),
            marker: head.marker,
            indent: head.length,
            pre: head.pre,
            children: [first].concat(follow.map(x => x.block)),
          },
        });
      },
  function(pre) {return {
        marker:pre.marker,
        length:pre.length+1,pre
      }},
  function(pre) {return {marker:pre.marker,length:pre.length+1,pre}},
  function(head, first, follow) {return {first, follow}},
  function(head, b) { Util.popBlockStack(blockStack) },
  function(head, b) {
        return visitor.visitListItem({
          node: {
            type: NODE_TYPES.ListItem,
            hasBlankline: b?(!b.follow.every(x=>!x.hasBlankline)):false,
            marker: head.marker,
            indent: head.length,
            pre: head.pre,
            children: b?[b.first].concat(b.follow.map(x => x.block)):[],
          },
        });
      },
  function(indent, marker) { return {length:indent.length+marker.text.length, marker, indent} },
  function(marker) { return {text:marker, type: LIST_TYPES.Bullet, delimiter: marker} },
  function(num, delimiter) { return {text: num+delimiter, type: LIST_TYPES.Ordered, delimiter, num:parseInt(num, 10)} },
  function() { states.currentListIndentPos=0; },
  function() { return states.currentListIndentPos < states.listIndentStack[states.listIndentStack.length-1] },
  function(sp) { states.currentListIndentPos++; },
  function(sp) {return sp},
  function(spaces) {return spaces.join('')},
  function() { return Util.isUnreadPrependingBQ(blockStack, states.currentBlockStackPos); },
  function() { return blockStack.length == states.currentBlockStackPos; },
  function() { states.currentBlockStackPos=0; },
  function() { return states.currentBlockStackPos<blockStack.length; },
  function() { states.currentBlockStackPos++; },
  function() { return blockStack[states.currentBlockStackPos].type == NODE_TYPES.BlockQuote; },
  function() { return blockStack[states.currentBlockStackPos].type == NODE_TYPES.ListItem; },
  function() { states.currentListItemSpacePos=0; },
  function() { return states.currentListItemSpacePos < blockStack[states.currentBlockStackPos].size; },
  function() { states.currentListItemSpacePos++; },
  function() { return blockStack[states.currentBlockStackPos].size == states.currentListItemSpacePos; },
  function(items) {
        return visitor.visitInlines(
          {
            children: items.reduce((acc,val)=>{ return acc.concat(val); },[]),
          }
        );
      },
  function(t) {return t},
  function(inline) {states.precededCharacterType = PRECEDED_CHARACTER_TYPES.WHITESPACE_AND_LINEENDING},
  function(inline) {return inline},
  function(inline) {states.precededCharacterType = PRECEDED_CHARACTER_TYPES.PUNCTUATION},
  function(t) {states.precededCharacterType = PRECEDED_CHARACTER_TYPES.OTHER},
  function(character) {
        return visitor.visitBackslashEscape(
          {
            type: NODE_TYPES.BackslashEscape,
            text: '\\'+character,
            content: character,
          }
        );
      },
  function(name) {return entities[name]},
  function(name) {
        return visitor.visitEntityReference(
          {
            type: NODE_TYPES.EntityCharacterReference,
            text: name,
            content: entities[name].characters,
            entity:{
              name,
              info: entities[name],
            },
          }
        );
      },
  function(decimal) {return decimal.length<9},
  function(decimal) { return parseInt(decimal.join(''), 10); },
  function(hex) {return hex.length<8},
  function(hex) { return parseInt(hex.join(''), 16); },
  function(num) {
        return visitor.visitNumericReference(
          {
            type: NODE_TYPES.NumericCharacterReference,
            text: "&#"+num+";",
            content: String.fromCodePoint(Util.replaceUnicodeCodePoint(num)),
            entity: {
              num: Util.replaceUnicodeCodePoint(num),
              text: num,
            },
          }
        );
      },
  function(start, innerBacktick) {return start.length === innerBacktick.length},
  function(start) {return " ";},
  function(start, str) {return str.join('');},
  function(start, cc) {return cc},
  function(start, content, end) {return start.length === end.length},
  function(start, content, end) {
        return visitor.visitCodeSpan(
          {
            type: NODE_TYPES.CodeSpan,
            content: content.join('').trim(),
            text: start.join('')+content.join('')+end.join(''),
            backtick: start,
          }
        );
      },
  function(open) {return false},
  function(open, blocks, next) { return next !== open[0]},
  function(open, blocks, next) {states.precededCharacterType = PRECEDED_CHARACTER_TYPES.PUNCTUATION},
  function(open, blocks) { return buildEmphasis(open, blocks) },
  function(open) { Util.pushInlineStack(inlineStack, Util.getDelimiterType(open), open.length) },
  function(open) {return open},
  function() { Util.popInlineStack(inlineStack) },
  function(item) {return item},
  function(block, delim) { return Util.closeEmphasis(inlineStack, delim) },
  function(block) { return inlineStack[inlineStack.length-1].unprocessedCloseSize },
  function(block) { return inlineStack[inlineStack.length-1].size-inlineStack[inlineStack.length-1].currentSize },
  function(block, closeSize) { return {
        items: block.reduce((acc,val)=>{ return acc.concat(val); },[]),
        closeSize
      } },
  function() { return true },
  function(canOpen, d) { return canOpen && (inlineStack[inlineStack.length-1].size + d.length) % 3 === 0 },
  function(canOpen, delim) { return inlineStack[inlineStack.length-1].type === Util.getDelimiterType(delim) },
  function(canOpen, delim) { return delim },
  function() { return Util.hasUnprocessedClose(inlineStack) },
  function() { return Util.isClosedCurrentStack(inlineStack) },
  function() { return Util.isInterceptedCurrentStack(inlineStack) },
  function() { return Util.interceptLinkOrImage(inlineStack) },
  function(delim) { return inlineStack[inlineStack.length-1].type !== Util.getDelimiterType(delim) },
  function(delim) { return Util.interceptAnotherDelimiterRun(inlineStack, delim) },
  function() { return states.precededCharacterType === PRECEDED_CHARACTER_TYPES.PUNCTUATION },
  function() { return states.precededCharacterType === PRECEDED_CHARACTER_TYPES.WHITESPACE_AND_LINEENDING },
  function(delim) { return delim },
  function() { return states.precededCharacterType === PRECEDED_CHARACTER_TYPES.OTHER },
  function(delim) {return delim},
  function(first) { states.maxCloseDelimiterRunSize = Util.totalCurrentOpenSize(inlineStack,first) },
  function(first) { states.tempCloseDelimiterRunSize = 1 },
  function(first) { return (states.tempCloseDelimiterRunSize < states.maxCloseDelimiterRunSize) },
  function(first, c) {return first === c},
  function(first, c) { states.tempCloseDelimiterRunSize++ },
  function(first, c) {return c},
  function(first, follow) {return first+follow.join('')},
  function() { Util.pushInlineStack(inlineStack, INLINE_STACK_TYPES.Link, 0) },
  function(link) { return Util.popLinkStack(inlineStack) },
  function(link) {return link},
  function(text, dest, t) {return t},
  function(text, dest, title) {return {dest,title}},
  function(text, title) {return {title}},
  function(text, destAndTitle) {
    return visitor.visitInlineLink(
      {
        type: NODE_TYPES.Link,
        content: text.map(x=>x.text).join(),
        text: text.map(x=>x.text).join(),
        dest: destAndTitle ? destAndTitle.dest : null,
        title:destAndTitle ? destAndTitle.title : null,
        children: text,
      }
    )
  },
  function(ref) {return !!visitor.def[ref.label.text.toLowerCase()] },
  function(ref) {
    return visitor.visitReferenceLink(
      {
        type: NODE_TYPES.Link,
        content: ref.text ? undefined : ref.label.text,
        text: ref.text ? undefined : ref.label.text,
        dest: visitor.def[ref.label.text.toLowerCase()].dest,
        title:visitor.def[ref.label.text.toLowerCase()].title,
        children: ref.text ? ref.text : ref.label.items,
      }
    )
  },
  function(text, label) {return {text, label}},
  function(label) {return {label}},
  function(nest) {return nest},
  function(content) {return content},
  function(items) { return Util.buildLinkText(items); },
  function(start, nest) {return nest},
  function(start, content) {return content},
  function(start, items, end) { return Util.buildLinkText([start].concat(items,end)); },
  function(str) { return str},
  function(item) {return '('+item+')';},
  function(node) {return node.content},
  function(c) {return c},
  function(text) {return text.join('')},
  function(text) {return text},
  function(dest) {return dest.join('');},
  function(char) {return char},
  function(title) {return title.join('')},
  function(ref) {return ref.text},
  function(label) {return label.length<1000},
  function(label) {
        return {
          text: Util.normalizeLinkLabel(label.join('')),
        }
      },
  function(items) {return Util.normalizeLinkLabel(
            items.reduce((acc,val)=>{return acc.concat(val)},[]).map(x=>x.text)
                 .join('')
          ).length<1000},
  function(items) {
        return {
          items: items.reduce((acc,val)=>{return acc.concat(val)},[]),
          text: Util.normalizeLinkLabel(
            items.reduce((acc,val)=>{return acc.concat(val)},[]).map(x=>x.text)
                 .join('')
          ),
        }
      },
  function(image) { return Util.popInlineStack(inlineStack) },
  function(image) {return image},
  function(desc, dest, t) {return t},
  function(desc, dest, title) {return {dest,title}},
  function(desc, title) {return {title}},
  function(desc, destAndTitle) {
    return visitor.visitInlineImage(
      {
        type: NODE_TYPES.Image,
        content: desc.map(x=>x.text).join(),
        text: desc.map(x=>x.text).join(),
        dest: destAndTitle ? destAndTitle.dest : null,
        title:destAndTitle ? destAndTitle.title : null,
        children: desc,
      }
    )
  },
  function(ref) {
    return visitor.visitReferenceImage(
      {
        type: NODE_TYPES.Image,
        content: ref.desc ? undefined : ref.label.text,
        text: ref.desc ? undefined : ref.label.text,
        dest: visitor.def[ref.label.text.toLowerCase()].dest,
        title:visitor.def[ref.label.text.toLowerCase()].title,
        children: ref.desc ? ref.desc : ref.label.items,
      }
    )
  },
  function(desc, label) {return {desc, label}},
  function(desc) { return Util.buildImageDesc(desc); },
  function(uri) {
        return visitor.visitAutolink(
          {
            type: NODE_TYPES.Autolink,
            text: uri,
            content: '<'+uri+'>',
            linkType: AUTOLINK_TYPE.Uri,
          }
        )
      },
  function(email) {
        return visitor.visitAutolink(
          {
            type: NODE_TYPES.Autolink,
            text: email,
            content: '<'+email+'>',
            linkType: AUTOLINK_TYPE.Mail,
          }
        )
      },
  function(followed) {return followed.length<32},
function(str) {return /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(str) },
    function(str) {return str},
    function(tag) { 
          return visitor.visitRawHTML(
            {
              type: NODE_TYPES.RawHTML,
              text: tag.text,
              content: tag.text,
            }
          );
        },
    function(name, attrs, ws, s) { return {
                name,
                attrs,
                text: '<'+name+attrs.map(v=>v.text).join('')+(ws?ws:'')+(s?s:'')+'>'
              } },
    function(name, ws) { return {name, text: '</'+name+(ws?ws:'')+'>'} },
    function(text) {return {text}},
    function(ws, name, v) {return {text: ws+name+(v?v.text:''), name, value: v?v.value:''}},
    function(ws1, ws2, v) {return {text:(ws1?ws1:'')+"="+(ws2?ws2:'')+v.text, value:v.value}},
    function(arr) {return arr.join('')},
    function(value) {return {text:value, value}},
    function(value) {return {text:"'"+value+"'", value}},
    function(value) {return {text:'"'+value+'"', value}},
    function(sp) {return ' '+sp.join('')},
    function(pre, spaces) {
          return visitor.visitHardLineBreak(
            {
              type: NODE_TYPES.HardLineBreak,
              text: pre+'\n'+spaces.join(''),
              content: '\n',
            }
          );
        },
    function(sp, spaces) {
          return visitor.visitSoftLineBreak(
            {
              type: NODE_TYPES.SoftLineBreak,
              text: (sp?sp:'')+'\n'+spaces.join(''),
              content: '\n',
            }
          );
        },
    function(c) {return [c]},
    function(text) {
          return text.map((val)=>{
            return visitor.visitTextualContent({
                type: NODE_TYPES.TextualContent,
                text: val,
                content: val,
            });
          });
        },
    function(sp) {return sp.join("");},
    function(sps) {return sps.join('')},
    function() {return '\n'},
    function(spaces, le) {return spaces.join('')+le},
    function(character) { return Zs[character] },
    function(character) { return Pc[character] },
    function(character) { return Pd[character] },
    function(character) { return Pe[character] },
    function(character) { return Pf[character] },
    function(character) { return Pi[character] },
    function(character) { return Po[character] },
    function(character) { return Ps[character] },
    function(domain, c) {return c},
    function(head, s, c) {return s+c},
    function(head, inner, last) { return ( (!inner)&&/_/.test(head) )||( inner&&/_/.test(inner[inner.length-1]) ) },
    function(head, inner, last) {return head + inner.join('') + last}
  ];

  var peg$bytecode = [
    peg$decode("%$;!0#*;!&8!: !! )"),
    peg$decode(";\".S &;#.M &;$.G &;(.A &;,.; &;C.5 &;L./ &;J.) &;I.# &;D"),
    peg$decode("%;\xA5%7 2 \"!6 #/\x8F#$;\xAE0#*;\xAE&7 2 \"!6 #/v$$;\xAE0#*;\xAE&$%7 2 \"!6 #/,#$;\xAE0#*;\xAE&+\")&'#/@#0=*%7 2 \"!6 #/,#$;\xAE0#*;\xAE&+\")&'#&&&#/#$+%)(%'#(#'#&'#.\u0123 &%7!2!\"!6!#/\x8F#$;\xAE0#*;\xAE&7!2!\"!6!#/v$$;\xAE0#*;\xAE&$%7!2!\"!6!#/,#$;\xAE0#*;\xAE&+\")&'#/@#0=*%7!2!\"!6!#/,#$;\xAE0#*;\xAE&+\")&'#&&&#/#$+%)(%'#(#'#&'#.\xA0 &%7\"2\"\"!6\"#/\x8F#$;\xAE0#*;\xAE&7\"2\"\"!6\"#/v$$;\xAE0#*;\xAE&$%7\"2\"\"!6\"#/,#$;\xAE0#*;\xAE&+\")&'#/@#0=*%7\"2\"\"!6\"#/,#$;\xAE0#*;\xAE&+\")&'#&&&#/#$+%)(%'#(#'#&'#/H$;\xA8.6 &%F7#1\"!5!#G!.##&&!&'#/&$8#:!$ (#'#(\"'#"),
    peg$decode("%;\xA5$7$2#\"!6##/-#0**7$2#\"!6##&&&#/\u0240$9:\" ! -\"\"&!&#/\u022C$%$;\xAE/&#0#*;\xAE&&&#/\u01E7#%$7$2#\"!6##/-#0**7$2#\"!6##&&&#/Q#%F%$;\xAE0#*;\xAE&;\xA8/#$+\")(\"'#G /##&'!&&#/'$8\":##!&(\"'#&'#.\u0177 &%$%%F%%$;\xAE/&#0#*;\xAE&&&#/G#$7$2#\"!6##/-#0**7$2#\"!6##&&&#/#$+\")(\"'#&'#.\" &\"$;\xAE0#*;\xAE&;\xA8/#$+#)(#'#G!.##&&!&'#/7#7#1\"!5!#/($8\":$#\"( (\"'#&'#0\xA4*%%F%%$;\xAE/&#0#*;\xAE&&&#/G#$7$2#\"!6##/-#0**7$2#\"!6##&&&#/#$+\")(\"'#&'#.\" &\"$;\xAE0#*;\xAE&;\xA8/#$+#)(#'#G!.##&&!&'#/7#7#1\"!5!#/($8\":$#\"( (\"'#&'#&%$;\xAE/&#0#*;\xAE&&&#/G#$7$2#\"!6##/-#0**7$2#\"!6##&&&#/#$+\")(\"'#&'#.\" &\"8\":%#\"&!/1$$;\xAE0#*;\xAE&8#:&$\"%!(\"'#&'#.\" &\";\xA8.6 &%F7#1\"!5!#G!.##&&!&'#/($8%:'&\"#!(%'#(#'#(\"'#"),
    peg$decode("%;%/\u010F#$%$%;[/1#;&/($8\":(#\"& (\"'#&'#/>#0;*%;[/1#;&/($8\":(#\"& (\"'#&'#&&&#/K#%;Z/2#;%/)$8\":)##&# (\"'#&'#/)$8\":*##$! (\"'#&'#0\x92*%$%;[/1#;&/($8\":(#\"& (\"'#&'#/>#0;*%;[/1#;&/($8\":(#\"& (\"'#&'#&&&#/K#%;Z/2#;%/)$8\":)##&# (\"'#&'#/)$8\":*##$! (\"'#&'#&8\":+#\"! &'#"),
    peg$decode("%;'/a#$%;Z/1#;'/($8\":,#\"$ (\"'#&'#0;*%;Z/1#;'/($8\":,#\"$ (\"'#&'#&8\":-#\"! &'#"),
    peg$decode("%;\xA9/' 8!:.!! )"),
    peg$decode("%%F;\xA9G!.##&&!&'#/\xB3#%;\xA6/' 8!:/!! )/\x9E$$%%F;\xA8G!.##&&!&'#/7#7#1\"!5!#/($8\":0#\"$ (\"'#&'#/Q#0N*%%F;\xA8G!.##&&!&'#/7#7#1\"!5!#/($8\":0#\"$ (\"'#&'#&&&#/2$;\xA8/)$8$:1%#\"! ($'#(#'#(\"'#&'#"),
    peg$decode("%;\xA5;)/\u01F8$$;\xAE0#*;\xAE&;*$;\xAE0#*;\xAE&;\xA8/\u01DB$$%;Z/\x95#%F%;\xA5;)/L$9:2 $,+) -\"\"&#&!/5$$;\xAE0#*;\xAE&;\xA8/#$+%)(%'#(#'#(\"'#G!.##&&!&'#/I$%$;\xAE0#*;\xAE&8!:3!$+*( );+/+$8$:4%%+*(! ($'#(\"'#&'#.R &%;Y/H#%$;\xAE0#*;\xAE&8!:3!$*)' );\xA8/*$8#:5$$*)'!(#'#&'#0\xD4*%;Z/\x95#%F%;\xA5;)/L$9:2 $,+) -\"\"&#&!/5$$;\xAE0#*;\xAE&;\xA8/#$+%)(%'#(#'#(\"'#G!.##&&!&'#/I$%$;\xAE0#*;\xAE&8!:3!$+*( );+/+$8$:4%%+*(! ($'#(\"'#&'#.R &%;Y/H#%$;\xAE0#*;\xAE&8!:3!$*)' );\xA8/*$8#:5$$*)'!(#'#&'#&%;Z/X#;\xA5;)/M$9:6 %*)'$ -\"\"&#&!/5$$;\xAE0#*;\xAE&;\xA8/#$+&)(&'#($'#(#'#&'#.\" &\"8(:7)$'&$!(&'#(\"'#"),
    peg$decode("%%7%2$\"!6$#/N#%$7&2%\"!6%#/-#0**7&2%\"!6%#&&&#/\"!&,)/#$+\")(\"'#&'#._ &%7'2&\"!6&#/N#%$7(2'\"!6'#/-#0**7(2'\"!6'#&&&#/\"!&,)/#$+\")(\"'#&'#/' 8!:8!! )"),
    peg$decode("%$%%F%$;\xAE0#*;\xAE&;\xA8/#$+\")(\"'#.7 &7&2%\"!6%#.* &7(2'\"!6'#G!.##&&!&'#/6#7#1\"!5!#/'$8\":9#! (\"'#&'#0{*%%F%$;\xAE0#*;\xAE&;\xA8/#$+\")(\"'#.7 &7&2%\"!6%#.* &7(2'\"!6'#G!.##&&!&'#/6#7#1\"!5!#/'$8\":9#! (\"'#&'#&8!::!! )"),
    peg$decode("%$%%F;\xA8G!.##&&!&'#/6#7#1\"!5!#/'$8\":9#! (\"'#&'#0M*%%F;\xA8G!.##&&!&'#/6#7#1\"!5!#/'$8\":9#! (\"'#&'#&;\xA8/($8\":;#\"! (\"'#"),
    peg$decode("%;-.# &;4/' 8!:<!! )"),
    peg$decode(";..; &;/.5 &;0./ &;1.) &;2.# &;3"),
    peg$decode("%%;\xA5&,%;5/\"!&,)/\u01A1$$%%F;6G!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#0\x94*%%F;6G!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#&%;6/\"!&,)/\xA6$%$%%F;\xA8.# &;\xB2G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#0O*%%F;\xA8.# &;\xB2G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#&&,%;\xA8.# &;\xB2/\"!&,)/,$8&:?'&%$#\"! (&'#($'#(\"'#"),
    peg$decode("%%;\xA5&,%;7/\"!&,)/\u01A1$$%%F;8G!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#0\x94*%%F;8G!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#&%;8/\"!&,)/\xA6$%$%%F;\xA8.# &;\xB2G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#0O*%%F;\xA8.# &;\xB2G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#&&,%;\xA8.# &;\xB2/\"!&,)/,$8&:?'&%$#\"! (&'#($'#(\"'#"),
    peg$decode("%%;\xA5&,%;9/\"!&,)/\u01A1$$%%F;:G!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#0\x94*%%F;:G!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#&%;:/\"!&,)/\xA6$%$%%F;\xA8.# &;\xB2G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#0O*%%F;\xA8.# &;\xB2G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#&&,%;\xA8.# &;\xB2/\"!&,)/,$8&:?'&%$#\"! (&'#($'#(\"'#"),
    peg$decode("%%;\xA5&,%;;/\"!&,)/\u01A1$$%%F;<G!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#0\x94*%%F;<G!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#&%;</\"!&,)/\xA6$%$%%F;\xA8.# &;\xB2G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#0O*%%F;\xA8.# &;\xB2G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#&&,%;\xA8.# &;\xB2/\"!&,)/,$8&:?'&%$#\"! (&'#($'#(\"'#"),
    peg$decode("%%;\xA5&,%;=/\"!&,)/\u01A1$$%%F;>G!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#0\x94*%%F;>G!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#&%;>/\"!&,)/\xA6$%$%%F;\xA8.# &;\xB2G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#0O*%%F;\xA8.# &;\xB2G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#&&,%;\xA8.# &;\xB2/\"!&,)/,$8&:?'&%$#\"! (&'#($'#(\"'#"),
    peg$decode("%%;\xA5&,%;?/\"!&,)/\u012B$$%%F;@G!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#0\x94*%%F;@G!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#&%;\xA8.# &;\xB2/\"!&,)/*$8$:@%$#\"! ($'#(\"'#"),
    peg$decode("%%;\xA5&,;A/\u012B$$%%F;BG!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#0\x94*%%F;BG!.##&&!&'#/}#%;\xA8/2#;Z/)$8\":=##'&!(\"'#&'#.O &%%F;\xA8G!.##&&!&'#/8#7#1\"!5!#/)$8\":>##'& (\"'#&'#/)$8\":>##%$ (\"'#&'#&%;\xA8.# &;\xB2/\"!&,)/*$8$:@%$#\"! ($'#(\"'#"),
    peg$decode("%7)2(\"!6(#/|#7*3)\"!5&#.7 &7+3*\"!5##.* &7,3+\"!5%#/R$%F;\xA8G /##&'!&&#.6 &;\xAA.0 &7-2,\"!6,#.# &;\xB2/#$+#)(#'#(\"'#&'#"),
    peg$decode("%7.2-\"!6-#/]#7*3)\"!5&#.7 &7+3*\"!5##.* &7,3+\"!5%#/3$7-2,\"!6,#/#$+#)(#'#(\"'#&'#.# &;\xB2"),
    peg$decode("7/2.\"!6.#"),
    peg$decode("702/\"!6/#.# &;\xB2"),
    peg$decode("7120\"!60#"),
    peg$decode("7221\"!61#.# &;\xB2"),
    peg$decode("%7322\"!62#/G#$744 \"!5!#/-#0**744 \"!5!#&&&#/#$+\")(\"'#&'#"),
    peg$decode("7-2,\"!6,#.# &;\xB2"),
    peg$decode("7523\"!63#"),
    peg$decode("7624\"!64#.# &;\xB2"),
    peg$decode("%7)2(\"!6(#/\u03A9#7725\"!65#.\" &\"7836\"!5'#.\u0343 &7937\"!5'#.\u0336 &7:38\"!5%#.\u0329 &7;39\"!5$#.\u031C &7<3:\"!5(#.\u030F &7=3;\"!5*#.\u0302 &7>3<\"!5$#.\u02F5 &7?3=\"!5'#.\u02E8 &7@3>\"!5&#.\u02DB &7A3?\"!5##.\u02CE &7B3@\"!5(#.\u02C1 &7C3A\"!5\"#.\u02B4 &7D3B\"!5'#.\u02A7 &7E3C\"!5&#.\u029A &7F3D\"!5##.\u028D &7G3E\"!5##.\u0280 &7H3F\"!5\"#.\u0273 &7I3G\"!5\"#.\u0266 &7J3H\"!5(#.\u0259 &7K3I\"!5*#.\u024C &7L3J\"!5&#.\u023F &7M3K\"!5&#.\u0232 &7N3L\"!5$#.\u0225 &7O3M\"!5%#.\u0218 &7P3N\"!5(#.\u020B &7Q3O\"!5\"#.\u01FE &7R3P\"!5\"#.\u01F1 &7S3Q\"!5\"#.\u01E4 &7T3R\"!5\"#.\u01D7 &7U3S\"!5\"#.\u01CA &7V3T\"!5\"#.\u01BD &7W3U\"!5$#.\u01B0 &7X3V\"!5&#.\u01A3 &7Y3W\"!5\"#.\u0196 &7Z3X\"!5$#.\u0189 &7[3Y\"!5&#.\u017C &7\\3Z\"!5&#.\u016F &7]3[\"!5\"#.\u0162 &7^3\\\"!5$#.\u0155 &7_3]\"!5$#.\u0148 &7`3^\"!5$#.\u013B &7a3_\"!5(#.\u012E &7b3`\"!5$#.\u0121 &7c3a\"!5##.\u0114 &7d3b\"!5(#.\u0107 &7e3c\"!5\"#.\xFA &7f3d\"!5(#.\xED &7g3e\"!5&#.\xE0 &7h3f\"!5!#.\xD3 &7i3g\"!5%#.\xC6 &7j3h\"!5'#.\xB9 &7k3i\"!5&#.\xAC &7l3j\"!5'#.\x9F &7m3k\"!5%#.\x92 &7n3l\"!5%#.\x85 &7o3m\"!5\"#.x &7p3n\"!5%#.k &7q3o\"!5\"#.^ &7r3p\"!5%#.Q &7s3q\"!5%#.D &7t3r\"!5\"#.7 &7u3s\"!5%#.* &7v3t\"!5\"#/e$%F;\xA8G /##&'!&&#.I &;\xAA.C &%7725\"!65#.\" &\"7-2,\"!6,#/#$+\")(\"'#/#$+$)($'#(#'#&'#"),
    peg$decode("%;\xA8/,#;\xA9/#$+\")(\"'#&'#.5 &%;\xA8.\" &\";\xB2/#$+\")(\"'#"),
    peg$decode("%%;\x94/' 8!:A!! )./ &%;\x95/' 8!:A!! )/k#9:B ! -\"\"&#&!/W$9:C !!-\"\"&#&!/C$%F;\xA8.# &;\xAAG /##&'!&&#/'$8$:D%!#($'#(#'#(\"'#&'#"),
    peg$decode("%;\xA8/,#;\xA9/#$+\")(\"'#&'#.5 &%;\xA8.\" &\";\xB2/#$+\")(\"'#"),
    peg$decode("%;\xA5;\x84/\u027A$7w2u\"!6u#/\u026A$$%%F;\xA8G!.##&&!&'#/,#;\xAA/#$+\")(\"'#&'#0C*%%F;\xA8G!.##&&!&'#/,#;\xAA/#$+\")(\"'#&'#&%;\xA8/l#$%%F;\xA8G!.##&&!&'#/,#;\xAA/#$+\")(\"'#&'#0C*%%F;\xA8G!.##&&!&'#/,#;\xAA/#$+\")(\"'#&'#&+\")&'#.\" &\";\x81/\u01BE$%%$%%F;\xA8G!.##&&!&'#/,#;\xAA/#$+\")(\"'#&'#/F#0C*%%F;\xA8G!.##&&!&'#/,#;\xAA/#$+\")(\"'#&'#&&&#/}#%;\xA8/l#$%%F;\xA8G!.##&&!&'#/,#;\xAA/#$+\")(\"'#&'#0C*%%F;\xA8G!.##&&!&'#/,#;\xAA/#$+\")(\"'#&'#&+\")&'#.\" &\"+\")&'#.v &%;\xA8/l#$%%F;\xA8G!.##&&!&'#/,#;\xAA/#$+\")(\"'#&'#0C*%%F;\xA8G!.##&&!&'#/,#;\xAA/#$+\")(\"'#&'#&+\")&'#/2#;\x83/)$8\":E##'# (\"'#&'#.\" &\"$%%F;\xA8G!.##&&!&'#/,#;\xAA/#$+\")(\"'#&'#0C*%%F;\xA8G!.##&&!&'#/,#;\xAA/#$+\")(\"'#&'#&;\xA8.6 &%F7#1\"!5!#G!.##&&!&'#/)$8):F*#'#\"()'#(&'#(#'#(\"'#"),
    peg$decode("%;\xA5;E/\x87$$;F0#*;F&%%F%;Z/,#;H/#$+\")(\"'#&'#G!.##&&!&'#/( 8!:G!\"#\").< &%;Z/2#;H/)$8\":H##$# (\"'#&'#/)$8$:I%#\"! ($'#(\"'#"),
    peg$decode("%%F;\xA9G!.##&&!&'#/\xB3#$%%F;\xA8G!.##&&!&'#/6#7#1\"!5!#/'$8\":9#! (\"'#&'#/P#0M*%%F;\xA8G!.##&&!&'#/6#7#1\"!5!#/'$8\":9#! (\"'#&'#&&&#/I$;\xA8.6 &%F7#1\"!5!#G!.##&&!&'#/'$8#:J$!!(#'#(\"'#&'#"),
    peg$decode("%%F;GG!.##&&!&'#/9#;[/0$;E/'$8#:K$! (#'#(\"'#&'#"),
    peg$decode("%;Z/t#;H.e &%;N/7#9:L ! -\"\"&#&!/#$+\")(\"'#&'#.A &%;P/7#9:L ! -\"\"&#&!/#$+\")(\"'#&'#/#$+\")(\"'#&'#.\x8F &%%F;ZG!.##&&!&'#/A#;[/8$;R.) &;P.# &;N/#$+#)(#'#(\"'#&'#.T &%;[/J#;\xA9.; &;\".5 &;#./ &;(.) &;J.# &;-/#$+\")(\"'#&'#"),
    peg$decode("%;\xA5%$7x2v\"!6v#/-#0**7x2v\"!6v#&&&#/& 8!:M! ).I &%$7 2 \"!6 #/-#0**7 2 \"!6 #&&&#/& 8!:N! )/9$$;\xAE0#*;\xAE&;\xA8/'$8$:O%!\"($'#(\"'#"),
    peg$decode("%;\xA9/U#$%;[/,#;\xA9/#$+\")(\"'#&'#06*%;[/,#;\xA9/#$+\")(\"'#&'#&8\":P# &'#"),
    peg$decode("%;K/\x92#9:Q  -\"\"&#&!/\x7F$;!/v$$%;Z/1#;!/($8\":R#\"$ (\"'#&'#0;*%;Z/1#;!/($8\":R#\"$ (\"'#&'#&9:S \"! -\"\"&#&!/($8%:T&\"\"!(%'#(#'#(\"'#&'#"),
    peg$decode("%;\xA57-2,\"!6,#/*$;\xAE.\" &\"+#)(\"'#"),
    peg$decode("%9:U  -\"\"&#&!/\u0162#;M.F &%9:V  -\"\"&!&#/2#7#1\"!5!#/#$+\")(\"'#&'#/\u0130$$%$%;[/,#;\xA9/#$+\")(\"'#&'#06*%;[/,#;\xA9/#$+\")(\"'#&'#&%F;\"G!.##&&!&'#/Q$;Z/H$;M/?$9:W #&# -\"\"&!&#/)$8%:X&#'$!(%'#($'#(#'#(\"'#0\x98*%$%;[/,#;\xA9/#$+\")(\"'#&'#06*%;[/,#;\xA9/#$+\")(\"'#&'#&%F;\"G!.##&&!&'#/Q$;Z/H$;M/?$9:W #&# -\"\"&!&#/)$8%:X&#'$!(%'#($'#(#'#(\"'#&9:Y \"! -\"\"&#&!/($8$:Z%\"\"!($'#(\"'#&'#"),
    peg$decode(";S.) &;Q.# &;O"),
    peg$decode("%;T/I#;\xAE/@$;\xA5%F;\xA9G!.##&&!&'#/($8$:[%\"#!($'#(\"'#&'#"),
    peg$decode("%;N/\u0139#9:\\ ! -\"\"&#&!/\u0125$9:] !!-\"\"&#&!/\u0111$;!/\u0108$$%$%;[/,#;\xA9/#$+\")(\"'#&'#06*%;[/,#;\xA9/#$+\")(\"'#&'#&%F;\"G!.##&&!&'#/<$;Z/3$;!/*$8$:^%$)&# ($'#(#'#(\"'#0\x83*%$%;[/,#;\xA9/#$+\")(\"'#&'#06*%;[/,#;\xA9/#$+\")(\"'#&'#&%F;\"G!.##&&!&'#/<$;Z/3$;!/*$8$:^%$)&# ($'#(#'#(\"'#&9:_ #$! -\"\"&#&!/)$8&:`'#%\"!(&'#($'#(#'#(\"'#&'#"),
peg$decode("%;T/\\#;\xAE/S$%F;\xA6G /##&'!&&#/=$%F;\xA9G!.##&&!&'#/'$8$:a%!#($'#(#'#(\"'#&'#"),
peg$decode("%;P/\u0139#9:\\ ! -\"\"&#&!/\u0125$9:] !!-\"\"&#&!/\u0111$;!/\u0108$$%$%;[/,#;\xA9/#$+\")(\"'#&'#06*%;[/,#;\xA9/#$+\")(\"'#&'#&%F;\"G!.##&&!&'#/<$;Z/3$;!/*$8$:^%$)&# ($'#(#'#(\"'#0\x83*%$%;[/,#;\xA9/#$+\")(\"'#&'#06*%;[/,#;\xA9/#$+\")(\"'#&'#&%F;\"G!.##&&!&'#/<$;Z/3$;!/*$8$:^%$)&# ($'#(#'#(\"'#&9:_ #$! -\"\"&#&!/)$8&:`'#%\"!(&'#($'#(#'#(\"'#&'#"),
    peg$decode("%;T/I#;\xA9.6 &%F7#1\"!5!#G!.##&&!&'#/'$8\":b#!!(\"'#&'#"),
    peg$decode("%;R/\u014E#9:\\ ! -\"\"&#&!/\u013A$9:] !!-\"\"&#&!/\u0126$%;Z/\xFB#;!/\xF2$$%$%;[/,#;\xA9/#$+\")(\"'#&'#06*%;[/,#;\xA9/#$+\")(\"'#&'#&%F;\"G!.##&&!&'#/<$;Z/3$;!/*$8$:^%$+&# ($'#(#'#(\"'#0\x83*%$%;[/,#;\xA9/#$+\")(\"'#&'#06*%;[/,#;\xA9/#$+\")(\"'#&'#&%F;\"G!.##&&!&'#/<$;Z/3$;!/*$8$:^%$+&# ($'#(#'#(\"'#&8#:c$#&! (\"'#&'#.\" &\"9:d \"# -\"\"&#&!/($8%:e&\"$!(%'#(#'#(\"'#&'#"),
    peg$decode("%;X/1#;U/($8\":f#\"! (\"'#&'#"),
    peg$decode(";V.# &;W"),
    peg$decode("%7y4!\"!5!#/' 8!:g!! )"),
    peg$decode("%%%7z4\"\"!5!#/\x93#7z4\"\"!5!#.\" &\"7z4\"\"!5!#.\" &\"7z4\"\"!5!#.\" &\"7z4\"\"!5!#.\" &\"7z4\"\"!5!#.\" &\"7z4\"\"!5!#.\" &\"7z4\"\"!5!#.\" &\"7z4\"\"!5!#.\" &\"+))&'#/\"!&,)/8#7{4#\"!5!#/($8\":h#\"! (\"'#&'#"),
    peg$decode("%9:i  -\"\"&#&!/\x9A#$%9:j  -\"\"&!&#/D#;\xAE/;$9:k ! -\"\"&#&!/'$8#:l$!!(#'#(\"'#&'#0X*%9:j  -\"\"&!&#/D#;\xAE/;$9:k ! -\"\"&#&!/'$8#:l$!!(#'#(\"'#&'#&8\":m#! &'#"),
    peg$decode("%;[/6#9:n  -\"\"&#&!/#$+\")(\"'#&'#"),
    peg$decode("%;[/6#9:o  -\"\"&!&#/#$+\")(\"'#&'#"),
    peg$decode("%9:p  -\"\"&#&!/\x98#$%9:q  -\"\"&!&#/E#;\\.# &;]/6$9:r  -\"\"&#&!/#$+#)(#'#(\"'#&'#0Y*%9:q  -\"\"&!&#/E#;\\.# &;]/6$9:r  -\"\"&#&!/#$+#)(#'#(\"'#&'#&+\")&'#"),
    peg$decode("%9:s  -\"\"&!&#/,#;K/#$+\")(\"'#&'#"),
    peg$decode("%9:t  -\"\"&!&#/\xBF#9:u  -\"\"&#&!/\xAC$$%9:v  -\"\"&!&#/?#;\xAE/6$9:w  -\"\"&#&!/#$+#)(#'#(\"'#&'#/V#0S*%9:v  -\"\"&!&#/?#;\xAE/6$9:w  -\"\"&#&!/#$+#)(#'#(\"'#&'#&&&#/6$9:x  -\"\"&!&#/#$+$)($'#(#'#(\"'#&'#"),
    peg$decode("%$;_0#*;_&8!:y!! )"),
    peg$decode(";`./ &;i.) &;a.# &;b"),
peg$decode("%;\xA2.M &;\xA3.G &%%F;\xACG /##&'!&&#/0#;\xA4/'$8\":z#! (\"'#&'#/;#9:{ ! -\"\"&#&!/'$8\":|#!!(\"'#&'#"),
peg$decode("%;h.k &;\x8D.e &;\x93._ &;d.Y &;e.S &;y.M &;\x86.G &%%F;\xAFG /##&'!&&#/0#;\xA4/'$8\":z#! (\"'#&'#/;#9:} ! -\"\"&#&!/'$8\":|#!!(\"'#&'#"),
peg$decode("%%F;\xAC.# &;\xAFG!.##&&!&'#/D#;\xA4/;$9:~ ! -\"\"&#&!/'$8#:z$!!(#'#(\"'#&'#"),
peg$decode(";d.# &;e"),
peg$decode("%7|2w\"!6w#/0#;\xAF/'$8\":\x7F#! (\"'#&'#"),
peg$decode(";f.# &;g"),
peg$decode("%%%7}2x\"!6x#/\xAB#$%%F7~2y\"!6y#G!.##&&!&'#/6#7#1\"!5!#/'$8\":9#! (\"'#&'#/W#0T*%%F7~2y\"!6y#G!.##&&!&'#/6#7#1\"!5!#/'$8\":9#! (\"'#&'#&&&#/3$7~2y\"!6y#/#$+#)(#'#(\"'#&'#/\"!&,)/;#9:\x80 ! -\"\"&!&#/'$8\":\x81#!!(\"'#&'#"),
peg$decode("%7\x7F2z\"!6z#/\xD0#%$7z4\"\"!5!#/-#0**7z4\"\"!5!#&&&#/;#9:\x82 ! -\"\"&!&#/'$8\":\x83#!!(\"'#&'#.p &%7\x804$\"!5!#/_#$7\x814%\"!5!#/-#0**7\x814%\"!5!#&&&#/;$9:\x84 ! -\"\"&!&#/'$8#:\x85$!!(#'#(\"'#&'#/7$7~2y\"!6y#/'$8#:\x86$!!(#'#(\"'#&'#"),
peg$decode("%$7&2%\"!6%#/-#0**7&2%\"!6%#&&&#/\u01D1#$%%F%$7&2%\"!6%#/-#0**7&2%\"!6%#&&&#/8#9:\x87 \"% -\"\"&!&#/#$+\")(\"'#&'#G!.##&&!&'#/~#%;\xAB/' 8!:\x88!!%).^ &%$7&2%\"!6%#/-#0**7&2%\"!6%#&&&#/( 8!:\x89!\"% ).0 &%7#1\"!5!#/\"!&,)/($8\":\x8A#\"$ (\"'#&'#/\xD2#0\xCF*%%F%$7&2%\"!6%#/-#0**7&2%\"!6%#&&&#/8#9:\x87 \"% -\"\"&!&#/#$+\")(\"'#&'#G!.##&&!&'#/~#%;\xAB/' 8!:\x88!!%).^ &%$7&2%\"!6%#/-#0**7&2%\"!6%#&&&#/( 8!:\x89!\"% ).0 &%7#1\"!5!#/\"!&,)/($8\":\x8A#\"$ (\"'#&'#&&&#/c$$7&2%\"!6%#/-#0**7&2%\"!6%#&&&#/?$9:\x8B #\"! -\"\"&!&#/)$8$:\x8C%##\"!($'#(#'#(\"'#&'#"),
peg$decode("%;j/\xBD#$;l/&#0#*;l&&&#.A &%;k/7#9:\x8D !\"-\"\"&!&#/#$+\")(\"'#&'#/\x83$;k/z$%F%7#1\"!5!#/O#9:\x8E #%$ -\"\"&!&#/9$9:\x8F #&%!-\"\"&!&#/#$+#)(#'#(\"'#&'#G!.##&&!&'#/($8$:\x90%\"#\"($'#(#'#(\"'#&'#"),
peg$decode("%;s/;#9:\x91 ! -\"\"&#&!/'$8\":\x92#!!(\"'#&'#"),
peg$decode("9:\x93  -\"\"&#&!"),
peg$decode("%$%%F;mG!.##&&!&'#/\x9E#%F;nG!.##&&!&'#/\x88$%F;oG!.##&&!&'#/r$%F;pG!.##&&!&'#/\\$%F;qG!.##&&!&'#/F$%F;rG!.##&&!&'#/0$;_/'$8':\x94(! (''#(&'#(%'#($'#(#'#(\"'#&'#/\xB8#0\xB5*%%F;mG!.##&&!&'#/\x9E#%F;nG!.##&&!&'#/\x88$%F;oG!.##&&!&'#/r$%F;pG!.##&&!&'#/\\$%F;qG!.##&&!&'#/F$%F;rG!.##&&!&'#/0$;_/'$8':\x94(! (''#(&'#(%'#($'#(#'#(\"'#&'#&&&#/b#%;m/( 8!:\x95!\"\" ).A &%;n/' 8!:\x96!!\")./ &%;o/' 8!:\x97!!\")/($8\":\x98#\"! (\"'#&'#"),
peg$decode("%%%F;sG /##&'!&&#/& 8!:\x99! ).\" &\"%F%;w/8#9:\x9A \"# -\"\"&#&!/#$+\")(\"'#&'#G /##&'!&&#/F$;t/=$9:\x9B \"\" -\"\"&!&#/($8$:\x9C%\"#!($'#(#'#(\"'#"),
peg$decode("9:\x9D  -\"\"&!&#"),
peg$decode("9:\x9E  -\"\"&!&#"),
peg$decode("9:\x9F  -\"\"&!&#"),
peg$decode("%F%7\x822{\"!6{#/6#9:\xA0  -\"\"&!&#/#$+\")(\"'#&'#G /##&'!&&#"),
peg$decode("%F%;t/K#9:\xA1 ! -\"\"&!&#/7$9:\xA2 !!-\"\"&!&#/#$+#)(#'#(\"'#&'#G /##&'!&&#"),
peg$decode("%9:\xA3  -\"\"&!&#.- &9:\xA4  -\"\"&!&#/Z#%F7\"2\"\"!6\"#.* &7!2!\"!6!#G /##&'!&&#/0$;u/'$8#:\xA5$! (#'#(\"'#&'#.a &%9:\xA6  -\"\"&!&#/M#%F7\"2\"\"!6\"#G /##&'!&&#/0$;u/'$8#:\xA5$! (#'#(\"'#&'#"),
peg$decode("%9:\xA3  -\"\"&!&#.- &9:\xA6  -\"\"&!&#/\xFF#%%F7\"2\"\"!6\"#G /##&'!&&#/0#;v/'$8\":\xA7#! (\"'#&'#.\xC1 &%%F7!2!\"!6!#G /##&'!&&#/F#%F;uG!.##&&!&'#/0$;v/'$8#:\xA7$! (#'#(\"'#&'#.z &%%F7!2!\"!6!#G /##&'!&&#/\\#%F;uG /##&'!&&#/F$;v/=$%F;\xB0G /##&'!&&#/'$8$:\xA7%!!($'#(#'#(\"'#&'#/'$8\":\xA7#! (\"'#&'#"),
peg$decode("%9:\xA3  -\"\"&!&#.- &9:\xA4  -\"\"&!&#/e#;w/\\$%F;\xAC.< &;\xA8.6 &%F7#1\"!5!#G!.##&&!&'#G!.##&&!&'#/'$8#:\xA5$!!(#'#(\"'#&'#.\x7F &%9:\xA6  -\"\"&!&#/k#;w/b$%F;\xAC.B &;\xB0.< &;\xA8.6 &%F7#1\"!5!#G!.##&&!&'#G!.##&&!&'#/'$8#:\xA5$!!(#'#(\"'#&'#"),
peg$decode("%9:\xA6  -\"\"&!&#/0#;x/'$8\":\xA7#! (\"'#&'#.\x9F &%9:\xA3  -\"\"&!&#/\x8B#%F%;w/^#%F;\xAC.B &;\xB0.< &;\xA8.6 &%F7#1\"!5!#G!.##&&!&'#G /##&'!&&#/#$+\")(\"'#&'#G /##&'!&&#/0$;x/'$8#:\xA5$! (#'#(\"'#&'#"),
peg$decode("%$7\"2\"\"!6\"#/-#0**7\"2\"\"!6\"#&&&#.> &$7!2!\"!6!#/-#0**7!2!\"!6!#&&&#/\"!&,)"),
peg$decode("%7\"2\"\"!6\"#.* &7!2!\"!6!#/\u011B#9:\xA8 ! -\"\"&#&!/\u0107$9:\xA9 !!-\"\"&#&!/\xF3$$%9:\xAA !$-\"\"&!&#/o#7\"2\"\"!6\"#.* &7!2!\"!6!#/R$9:\xAB \"& -\"\"&!&#/=$9:\xAC \"'!-\"\"&#&!/($8$:\xAD%\"(\"($'#(#'#(\"'#&'#0\x84*%9:\xAA !$-\"\"&!&#/o#7\"2\"\"!6\"#.* &7!2!\"!6!#/R$9:\xAB \"& -\"\"&!&#/=$9:\xAC \"'!-\"\"&#&!/($8$:\xAD%\"(\"($'#(#'#(\"'#&'#&8$:\xAE%\"# (#'#(\"'#&'#"),
peg$decode("%%F7\x832|\"!6|#G /##&'!&&#/\x86#9:\xAF  -\"\"&#&!/s$;z.L &;{.F &%9:\x93  -\"\"&!&#/2#7#1\"!5!#/#$+\")(\"'#&'#/;$9:\xB0 ! -\"\"&!&#/'$8$:\xB1%!!($'#(#'#(\"'#&'#"),
peg$decode("%;\x7F/\xA0#7\x842}\"!6}#/\x90$;\xAB.\" &\"%;\x81/I#%;\xAB/2#;\x83/)$8\":\xB2##'# (\"'#&'#.\" &\"8\":\xB3##%! &'#.0 &%;\x83/( 8!:\xB4!\"$ ).\" &\";\xAB.\" &\"7\x852~\"!6~#/($8&:\xB5'\"%\"(&'#(\"'#&'#"),
peg$decode("%;|.) &;}.# &;~/;#9:\xB6 ! -\"\"&!&#/'$8\":\xB7#!!(\"'#&'#"),
peg$decode("%;\x7F/1#;\x84/($8\":\xB8#\"! (\"'#&'#"),
peg$decode("%;\x85/7#7\x862\x7F\"!6\x7F#/'$8\":\xB9#!!(\"'#&'#"),
peg$decode("%;\x85/=#%F;\x84G!.##&&!&'#/'$8\":\xB9#!!(\"'#&'#"),
peg$decode("%7\x832|\"!6|#/\xF6#$%%F;yG!.##&&!&'#/0#;\x80/'$8\":\xBA#! (\"'#&'#.T &%%F;y.* &7\x874&\"!5!#G!.##&&!&'#/0#;_/'$8\":\xBB#! (\"'#&'#0~*%%F;yG!.##&&!&'#/0#;\x80/'$8\":\xBA#! (\"'#&'#.T &%%F;y.* &7\x874&\"!5!#G!.##&&!&'#/0#;_/'$8\":\xBB#! (\"'#&'#&7\x822{\"!6{#/'$8#:\xBC$!!(#'#&'#"),
peg$decode("%%F7\x832|\"!6|#G /##&'!&&#/\u011B#;\xA4/\u0112$$%%F;yG!.##&&!&'#/1#;\x80/($8\":\xBD#\"$ (\"'#&'#.U &%%F;y.* &7\x874&\"!5!#G!.##&&!&'#/1#;_/($8\":\xBE#\"$ (\"'#&'#0\x80*%%F;yG!.##&&!&'#/1#;\x80/($8\":\xBD#\"$ (\"'#&'#.U &%%F;y.* &7\x874&\"!5!#G!.##&&!&'#/1#;_/($8\":\xBE#\"$ (\"'#&'#&%F7\x822{\"!6{#G /##&'!&&#/2$;\xA4/)$8%:\xBF&##\" (%'#($'#(\"'#&'#"),
peg$decode("%7)2(\"!6(#/\xB7#%$%%F;\xAE.# &;\xA8G!.##&&!&'#/@#%;c.* &7\x884'\"!5!#/\"!&,)/#$+\")(\"'#&'#0]*%%F;\xAE.# &;\xA8G!.##&&!&'#/@#%;c.* &7\x884'\"!5!#/\"!&,)/#$+\")(\"'#&'#&&,7-2,\"!6,#/'$8#:\xC0$!!(#'#&'#.\u0134 &%$%7\x842}\"!6}#/9#;\x827\x852~\"!6~#/'$8#:\xC1$!!(#'#&'#.r &%;c/' 8!:\xC2!! ).` &%%F;\xB1.0 &;\xAE.* &7\x894(\"!5!#G!.##&&!&'#/6#7#1\"!5!#/'$8\":\xC3#! (\"'#&'#/\xA2#0\x9F*%7\x842}\"!6}#/9#;\x827\x852~\"!6~#/'$8#:\xC1$!!(#'#&'#.r &%;c/' 8!:\xC2!! ).` &%%F;\xB1.0 &;\xAE.* &7\x894(\"!5!#G!.##&&!&'#/6#7#1\"!5!#/'$8\":\xC3#! (\"'#&'#&&&#/' 8!:\xC4!! )"),
    peg$decode("%$%7\x842}\"!6}#/9#;\x827\x852~\"!6~#/'$8#:\xC1$!!(#'#&'#.~ &%%;c/' 8!:\xC2!! ).` &%%F;\xB1.0 &;\xAE.* &7\x894(\"!5!#G!.##&&!&'#/6#7#1\"!5!#/'$8\":\xC3#! (\"'#&'#/' 8!:\xC5!! )0\xAB*%7\x842}\"!6}#/9#;\x827\x852~\"!6~#/'$8#:\xC1$!!(#'#&'#.~ &%%;c/' 8!:\xC2!! ).` &%%F;\xB1.0 &;\xAE.* &7\x894(\"!5!#G!.##&&!&'#/6#7#1\"!5!#/'$8\":\xC3#! (\"'#&'#/' 8!:\xC5!! )&8!:\xC6!! )"),
    peg$decode("%7\x8A2\x80\"!6\x80#/\u0110#$%%;c/' 8!:\xC2!! ).m &%%F7\x8A2\x80\"!6\x80#.6 &%;\xA8/,#;\xA9/#$+\")(\"'#&'#G!.##&&!&'#/6#7#1\"!5!#/'$8\":\xC3#! (\"'#&'#/' 8!:\xC7!! )0\x8B*%%;c/' 8!:\xC2!! ).m &%%F7\x8A2\x80\"!6\x80#.6 &%;\xA8/,#;\xA9/#$+\")(\"'#&'#G!.##&&!&'#/6#7#1\"!5!#/'$8\":\xC3#! (\"'#&'#/' 8!:\xC7!! )&7\x8A2\x80\"!6\x80#/'$8#:\xC8$!!(#'#&'#.\u0225 &%7\x8B2\x81\"!6\x81#/\u0110#$%%;c/' 8!:\xC2!! ).m &%%F7\x8B2\x81\"!6\x81#.6 &%;\xA8/,#;\xA9/#$+\")(\"'#&'#G!.##&&!&'#/6#7#1\"!5!#/'$8\":\xC3#! (\"'#&'#/' 8!:\xC7!! )0\x8B*%%;c/' 8!:\xC2!! ).m &%%F7\x8B2\x81\"!6\x81#.6 &%;\xA8/,#;\xA9/#$+\")(\"'#&'#G!.##&&!&'#/6#7#1\"!5!#/'$8\":\xC3#! (\"'#&'#/' 8!:\xC7!! )&7\x8B2\x81\"!6\x81#/'$8#:\xC8$!!(#'#&'#.\u0121 &%7\x842}\"!6}#/\u0110#$%%;c/' 8!:\xC2!! ).m &%%F7\x852~\"!6~#.6 &%;\xA8/,#;\xA9/#$+\")(\"'#&'#G!.##&&!&'#/6#7#1\"!5!#/'$8\":\xC3#! (\"'#&'#/' 8!:\xC7!! )0\x8B*%%;c/' 8!:\xC2!! ).m &%%F7\x852~\"!6~#.6 &%;\xA8/,#;\xA9/#$+\")(\"'#&'#G!.##&&!&'#/6#7#1\"!5!#/'$8\":\xC3#! (\"'#&'#/' 8!:\xC7!! )&7\x852~\"!6~#/'$8#:\xC8$!!(#'#&'#"),
    peg$decode("%7\x832|\"!6|#/\xEE#;\xAB.\" &\"$%%F7\x874&\"!5!#G!.##&&!&'#/H#%;c/' 8!:\xC9!! ).) &7#1\"!5!#/'$8\":\xC7#! (\"'#&'#/i#0f*%%F7\x874&\"!5!#G!.##&&!&'#/H#%;c/' 8!:\xC9!! ).) &7#1\"!5!#/'$8\":\xC7#! (\"'#&'#&&&#/K$9:\xCA ! -\"\"&!&#/7$7\x822{\"!6{#/'$8%:\xCB&!\"(%'#($'#(#'#&'#"),
    peg$decode("%7\x832|\"!6|#/\xCA#;\xAB.\" &\"$%%F;y.* &7\x874&\"!5!#G!.##&&!&'#/0#;_/'$8\":\xBB#! (\"'#&'#/W#0T*%%F;y.* &7\x874&\"!5!#G!.##&&!&'#/0#;_/'$8\":\xBB#! (\"'#&'#&&&#/K$9:\xCC ! -\"\"&!&#/7$7\x822{\"!6{#/'$8%:\xCD&!\"(%'#($'#(#'#&'#"),
    peg$decode("%%F7\x8C2\x82\"!6\x82#G /##&'!&&#/\x86#9:\xAF  -\"\"&#&!/s$;\x87.L &;\x88.F &%9:\x93  -\"\"&!&#/2#7#1\"!5!#/#$+\")(\"'#&'#/;$9:\xCE ! -\"\"&!&#/'$8$:\xCF%!!($'#(#'#(\"'#&'#"),
    peg$decode("%;\x8C/\xA0#7\x842}\"!6}#/\x90$;\xAB.\" &\"%;\x81/I#%;\xAB/2#;\x83/)$8\":\xD0##'# (\"'#&'#.\" &\"8\":\xD1##%! &'#.0 &%;\x83/( 8!:\xD2!\"$ ).\" &\";\xAB.\" &\"7\x852~\"!6~#/($8&:\xD3'\"%\"(&'#(\"'#&'#"),
    peg$decode("%;\x89.) &;\x8A.# &;\x8B/;#9:\xB6 ! -\"\"&!&#/'$8\":\xD4#!!(\"'#&'#"),
    peg$decode("%;\x8C/1#;\x84/($8\":\xD5#\"! (\"'#&'#"),
    peg$decode("%7\x8D2\x83\"!6\x83#/@#;\x85/7$7\x862\x7F\"!6\x7F#/'$8#:\xB9$!!(#'#(\"'#&'#"),
    peg$decode("%7\x8D2\x83\"!6\x83#/F#;\x85/=$%F;\x84G!.##&&!&'#/'$8#:\xB9$!!(#'#(\"'#&'#"),
    peg$decode("%7\x8C2\x82\"!6\x82#/\x96#$%%F7\x874&\"!5!#G!.##&&!&'#/0#;_/'$8\":\xBB#! (\"'#&'#0N*%%F7\x874&\"!5!#G!.##&&!&'#/0#;_/'$8\":\xBB#! (\"'#&'#&7\x822{\"!6{#/'$8#:\xD6$!!(#'#&'#"),
    peg$decode(";\x8E.# &;\x8F"),
    peg$decode("%7)2(\"!6(#/@#;\x90/7$7-2,\"!6,#/'$8#:\xD7$!!(#'#(\"'#&'#"),
    peg$decode("%7)2(\"!6(#/@#;\x92/7$7-2,\"!6,#/'$8#:\xD8$!!(#'#(\"'#&'#"),
    peg$decode("%%;\x91/\xAE#7w2u\"!6u#/\x9E$$%%F;\xAA.0 &;\xB1.* &7\x8E4)\"!5!#G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#0\\*%%F;\xAA.0 &;\xB1.* &7\x8E4)\"!5!#G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#&+#)(\"'#&'#/\"!&,)"),
    peg$decode("%%7\x8F4*\"!5!#/[#$7\x904+\"!5!#/-#0**7\x904+\"!5!#&&&#/7$9:\xD9 ! -\"\"&!&#/#$+#)(#'#(\"'#&'#/\"!&,)"),
    peg$decode("%%$%%F7-2,\"!6,#G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#/S#0P*%%F7-2,\"!6,#G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#&&&#/\"!&,)/;#9:\xDA ! -\"\"&!&#/'$8\":\xDB#!!(\"'#&'#"),
    peg$decode("%;\x94.; &;\x95.5 &;\x96./ &;\x97.) &;\x98.# &;\x99/' 8!:\xDC!! )"),
    peg$decode("%7)2(\"!6(#/a#;\x9A/X$$;\x9B0#*;\x9B&;\xAB.\" &\"7725\"!65#.\" &\"7-2,\"!6,#/*$8&:\xDD'$$#\"!(&'#(\"'#&'#"),
    peg$decode("%7.2-\"!6-#/H#;\x9A/?$;\xAB.\" &\"7-2,\"!6,#/($8$:\xDE%\"\"!($'#(\"'#&'#"),
    peg$decode("%%%7/2.\"!6.#/\xDD#%F7-2,\"!6,#.* &7\x912\x84\"!6\x84#G!.##&&!&'#/\xB3$$%%F7\x922\x85\"!6\x85#G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#0P*%%F7\x922\x85\"!6\x85#G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#&%F7\x932\x86\"!6\x86#G!.##&&!&'#/3$702/\"!6/#/#$+%)(%'#($'#(\"'#&'#/\"!&,)/' 8!:\xDF!! )"),
    peg$decode("%%%7120\"!60#/\x96#$%%F7221\"!61#G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#0P*%%F7221\"!61#G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#&7221\"!61#/#$+#)(#'#&'#/\"!&,)/' 8!:\xDF!! )"),
    peg$decode("%%%7322\"!62#/\xC3#$744 \"!5!#/-#0**744 \"!5!#&&&#/\x9F$;\xAB/\x96$$%%F7-2,\"!6,#G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#0P*%%F7-2,\"!6,#G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#&7-2,\"!6,#/#$+%)(%'#(#'#(\"'#&'#/\"!&,)/' 8!:\xDF!! )"),
    peg$decode("%%%7523\"!63#/\x96#$%%F7624\"!64#G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#0P*%%F7624\"!64#G!.##&&!&'#/2#7#1\"!5!#/#$+\")(\"'#&'#&7624\"!64#/#$+#)(#'#&'#/\"!&,)/' 8!:\xDF!! )"),
    peg$decode("%%7\x8F4*\"!5!#/:#$7\x944,\"!5!#0**7\x944,\"!5!#&+\")&'#/\"!&,)"),
    peg$decode("%;\xAB/9#;\x9C/0$;\x9D.\" &\"8#:\xE0$#\"! (\"'#&'#"),
    peg$decode("%%7\x954-\"!5!#/:#$7\x964.\"!5!#0**7\x964.\"!5!#&+\")&'#/\"!&,)"),
    peg$decode("%;\xAB.\" &\"7x2v\"!6v#/9$;\xAB.\" &\";\x9E/)$8$:\xE1%##! ($'#(\"'#"),
    peg$decode(";\x9F.) &;\xA0.# &;\xA1"),
    peg$decode("%%$7\x974/\"!5!#/-#0**7\x974/\"!5!#&&&#/' 8!:\xE2!! )/' 8!:\xE3!! )"),
    peg$decode("%7\x8B2\x81\"!6\x81#/W#%$7\x9840\"!5!#0**7\x9840\"!5!#&8!:\xE2!! )7\x8B2\x81\"!6\x81#/'$8#:\xE4$!!(#'#&'#"),
    peg$decode("%7\x8A2\x80\"!6\x80#/W#%$7\x9941\"!5!#0**7\x9941\"!5!#&8!:\xE2!! )7\x8A2\x80\"!6\x80#/'$8#:\xE5$!!(#'#&'#"),
    peg$decode("%%;\xAE/=#$;\xAE/&#0#*;\xAE&&&#/'$8\":\xE6#! (\"'#&'#.* &7|2w\"!6w#/:#;\xA8/1$$;\xAE0#*;\xAE&8#:\xE7$\"\" (\"'#&'#"),
    peg$decode("%;\xAE.\" &\";\xA8/1$$;\xAE0#*;\xAE&8#:\xE8$\"\" (\"'#"),
    peg$decode("%$7&2%\"!6%#/-#0**7&2%\"!6%#&&&#.w &$7\"2\"\"!6\"#/-#0**7\"2\"\"!6\"#&&&#.V &$7!2!\"!6!#/-#0**7!2!\"!6!#&&&#.5 &%7#1\"!5!#/' 8!:\xE9!! )/' 8!:\xEA!! )"),
    peg$decode("%%;\xAE.\" &\";\xAE.\" &\";\xAE.\" &\"+#)&,"),
    peg$decode("%%%;\xAE/\"!&,)/e#%;\xAE/\"!&,)/U$%;\xAE/\"!&,)/E$%$;\xAE/&#0#*;\xAE&&&#/' 8!:\xEB!! )/#$+$)($'#(#'#(\"'#&'#/' 8!:\xEC!! )"),
    peg$decode("$%%F;\xA8G!.##&&!&'#/4#1\"!5!#/'$8\":9#! (\"'#&'#0K*%%F;\xA8G!.##&&!&'#/4#1\"!5!#/'$8\":9#! (\"'#&'#&"),
    peg$decode("%7\x9A2\x87\"!6\x87#.B &%7\x9B2\x88\"!6\x88#/1#7\x9A2\x87\"!6\x87#.\" &\"+\")&'#/& 8!:\xED! )"),
    peg$decode("%$7\x9C42\"!5!#0**7\x9C42\"!5!#&;\xA8/($8\":\xEE#\"! (\"'#"),
    peg$decode("7\x9D2\x89\"!6\x89#.^ &7\x9E2\x8A\"!6\x8A#.Q &7\x9A2\x87\"!6\x87#.D &7\x9F2\x8B\"!6\x8B#.7 &7\xA02\x8C\"!6\x8C#.* &7\x9B2\x88\"!6\x88#"),
    peg$decode("%$;\xAA/&#0#*;\xAA&&&#/\"!&,)"),
    peg$decode(";\xB3.Q &7\x9E2\x8A\"!6\x8A#.D &7\x9B2\x88\"!6\x88#.7 &7\x9A2\x87\"!6\x87#.* &7\xA02\x8C\"!6\x8C#"),
    peg$decode("$;\xAC/&#0#*;\xAC&&&#"),
    peg$decode("7\x9D2\x89\"!6\x89#"),
    peg$decode("7\xA143\"!5!#"),
    peg$decode(";\xAF.G &;\xB4.A &;\xB5.; &;\xB6.5 &;\xB7./ &;\xB8.) &;\xB9.# &;\xBA"),
    peg$decode("7\xA244\"!5!#"),
    peg$decode("%F7#1\"!5!#G!.##&&!&'#"),
    peg$decode("%7#1\"!5!#/7#9:\xEF ! -\"\"&!&#/#$+\")(\"'#&'#"),
    peg$decode("%7#1\"!5!#/7#9:\xF0 ! -\"\"&!&#/#$+\")(\"'#&'#"),
    peg$decode("%7#1\"!5!#/7#9:\xF1 ! -\"\"&!&#/#$+\")(\"'#&'#"),
    peg$decode("%7#1\"!5!#/7#9:\xF2 ! -\"\"&!&#/#$+\")(\"'#&'#"),
    peg$decode("%7#1\"!5!#/7#9:\xF3 ! -\"\"&!&#/#$+\")(\"'#&'#"),
    peg$decode("%7#1\"!5!#/7#9:\xF4 ! -\"\"&!&#/#$+\")(\"'#&'#"),
    peg$decode("%7#1\"!5!#/7#9:\xF5 ! -\"\"&!&#/#$+\")(\"'#&'#"),
    peg$decode("%7#1\"!5!#/7#9:\xF6 ! -\"\"&!&#/#$+\")(\"'#&'#"),
    peg$decode(";\xBC.# &;\xBD"),
    peg$decode("%2\x8D\"!6\x8D#/\xEA#;\xBE/\xE1$$%%F;\xAE.G &;\xA8.A &%45\"!5!#/2#;\xAE.# &;\xA8/#$+\")(\"'#&'#G!.##&&!&'#/6#46\"!5!#/($8\":\xF7#\"$ (\"'#&'#/z#0w*%%F;\xAE.G &;\xA8.A &%45\"!5!#/2#;\xAE.# &;\xA8/#$+\")(\"'#&'#G!.##&&!&'#/6#46\"!5!#/($8\":\xF7#\"$ (\"'#&'#&&&#/#$+#)(#'#(\"'#&'#"),
    peg$decode("%2\x8E\"!6\x8E#.3 &2\x8F\"!6\x8F#.( &2\x90\"!6\x90#/:#2\x91\"!6\x91#/,$;\xBE/#$+#)(#'#(\"'#&'#"),
    peg$decode("%%$47\"!5!#.3 &2!\"!6!#.( &2 \"!6 #/A#0>*47\"!5!#.3 &2!\"!6!#.( &2 \"!6 #&&&#/\"!&,)/\u0170#2\x92\"!6\x92#/\u0162$$%%$47\"!5!#.3 &2!\"!6!#.( &2 \"!6 #/A#0>*47\"!5!#.3 &2!\"!6!#.( &2 \"!6 #&&&#/\"!&,)/7#2\x92\"!6\x92#/)$8\":\xF8##%! (\"'#&'#/\x8E#0\x8B*%%$47\"!5!#.3 &2!\"!6!#.( &2 \"!6 #/A#0>*47\"!5!#.3 &2!\"!6!#.( &2 \"!6 #&&&#/\"!&,)/7#2\x92\"!6\x92#/)$8\":\xF8##%! (\"'#&'#&&&#/|$%$47\"!5!#.( &2 \"!6 #/6#03*47\"!5!#.( &2 \"!6 #&&&#/\"!&,)/?$9:\xF9 ##! -\"\"&#&!/)$8%:\xFA&#$\"!(%'#($'#(#'#(\"'#&'#")
  ];

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$expected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return [peg$savedPos, peg$currPos];
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
  function peg$computeLocation(startPos, endPos) {
    var loc = {};

    if ( peg$VALIDFILENAME ) loc.filename = options.filename;

    var startPosDetails = peg$computePosDetails(startPos);
    loc.start = {
      offset: startPos,
      line: startPosDetails.line,
      column: startPosDetails.column
    };

    var endPosDetails = peg$computePosDetails(endPos);
    loc.end = {
      offset: endPos,
      line: endPosDetails.line,
      column: endPosDetails.column
    };

    return loc;
  }

  function peg$begin() {
    peg$expected.push({ pos: peg$currPos, variants: [] });
  }

  function peg$expect(expected) {
    var top = peg$expected[peg$expected.length - 1];

    if (peg$currPos < top.pos) { return; }

    if (peg$currPos > top.pos) {
      top.pos = peg$currPos;
      top.variants = [];
    }

    top.variants.push(expected);
  }

  function peg$end(invert) {
    var expected = peg$expected.pop();
    var top = peg$expected[peg$expected.length - 1];
    var variants = expected.variants;

    if (top.pos !== expected.pos) { return; }

    if (invert) {
      variants = variants.map(function(e) {
        return e.type === "not" ? e.expected : { type: "not", expected: e };
      });
    }

    Array.prototype.push.apply(top.variants, variants);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$buildError() {
    var expected = peg$expected[0];
    var failPos = expected.pos;

    return peg$buildStructuredError(
      expected.variants,
      failPos < input.length ? input.charAt(failPos) : null,
      failPos < input.length
        ? peg$computeLocation(failPos, failPos + 1)
        : peg$computeLocation(failPos, failPos)
    );
  }

  function peg$decode(s) {
    return s.split("").map(function(ch) { return ch.charCodeAt(0) - 32; });
  }

  function peg$parseRule(index) {
    var bc = peg$bytecode[index];
    var ip = 0;
    var ips = [];
    var end = bc.length;
    var ends = [];
    var stack = [];
    var params;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push('');
            ip++;
            break;

          case 1:
            stack.push(undefined);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$literals[bc[ip + 1]].length) === peg$literals[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$literals[bc[ip + 1]].length).toLowerCase() === peg$literals[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$regexps[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$literals[bc[ip + 1]]);
            peg$currPos += peg$literals[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            rule$expects(peg$expectations[bc[ip + 1]]);
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3])
              .map(function(p) { return stack[stack.length - 1 - p]; });

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$functions[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          case 38:
            peg$begin();
            ip++;
            break;

          case 39:
            peg$end(bc[ip + 1]);
            ip += 2;
            break;

          // istanbul ignore next
          default:
            throw new Error(
              "Rule #" + index + ", position " + ip + ": "
              + "Invalid opcode " + bc[ip] + "."
            );
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }


    const Pc = require("../src/resources/unicode/Pc");
    const Pd = require("../src/resources/unicode/Pd");
    const Pe = require("../src/resources/unicode/Pe");
    const Pf = require("../src/resources/unicode/Pf");
    const Pi = require("../src/resources/unicode/Pi");
    const Po = require("../src/resources/unicode/Po");
    const Ps = require("../src/resources/unicode/Ps");
    const Zs = require("../src/resources/unicode/Zs");
    const entities = require("../src/resources/entities");
    const NODE_TYPES = require("../src/consts/nodeTypes");
    const LIST_TYPES = require("../src/consts/listTypes");
    const INLINE_STACK_TYPES = require("../src/consts/inlineStackTypes");
    const INLINE_STACK_STATES = require("../src/consts/inlineStackStates");
    const AUTOLINK_TYPE = require("../src/consts/autolinkTypes");
    const PRECEDED_CHARACTER_TYPES = require("../src/consts/precededCharacterType");
    const Util = require("../src/util");

    const visitor = options.visitor;
    const states = options.states;
    const mode = options.mode;
    const blockStack = (states&&states.blockStack) ? states.blockStack : [];
    const inlineStack = (states&&states.inlineStack) ? states.inlineStack : [];

    function buildEmphasis(open, blocks){
      let rem = open.length;
      const delimChar = open[0];
      const emphasis = blocks.reduce((acc, val)=>{
        let current = acc.concat(val.items);
        for(let i=val.closeSize; i>0; ){
          if(i>1){
            current = [
              visitor.visitStrongEmphasis(
                {
                  type: NODE_TYPES.StrongEmphasis,
                  content: '',
                  text: delimChar+delimChar+current.map(x=>x.text).join('')+
                        delimChar+delimChar,
                  children: current,
                }
              )
            ];
            i-=2;
            rem-=2;
          }else{
            current = [
              visitor.visitEmphasis(
                {
                  type: NODE_TYPES.Emphasis,
                  content: '',
                  text: delimChar+current.map(x=>x.text).join('')+delimChar,
                  children: current,
                }
              )
            ];
            i--;
            rem--;
          }
        }
        return current;
      },[]);
      let texts = [];
      for(let i=0;i<rem;i++){
        texts.push(
          visitor.visitTextualContent({
            type: NODE_TYPES.TextualContent,
            text: open[0],
          })
        );
      }
      return texts.concat(emphasis);
    }


  peg$begin();
  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$expect(peg$endExpectation());
    }

    throw peg$buildError();
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
